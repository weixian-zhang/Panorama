

let NSGGroup =
AzureActivity
| extend CallerIP = CallerIpAddress
| extend ResourceCategory = parse_json(Properties).resourceProviderValue
| extend ResourceIDSplit = split(_ResourceId, "/")
| extend Resource = toupper(ResourceIDSplit[array_length(ResourceIDSplit)-1])
| extend ActionNamespace = split(parse_json(Authorization).action, "/")
| extend ActionType = toupper(ActionNamespace[array_length(ActionNamespace) -1])
| extend RequestBody = todynamic(parse_json(tostring(parse_json(Properties)["requestbody"]))["properties"])
| extend IsArray = iif(array_length(RequestBody) > 0, true, false)
| extend NSG = parse_json(tostring(parse_json(tostring(parse_json(Properties)["requestbody"]))["properties"]))
| extend Rules = NSG["securityRules"]
| where
    isnotempty(Rules) and array_length(Rules) > 0 and
    CategoryValue  == "Administrative" and
    ActivityStatusValue in ("Started", "Success") and
    ActionType in ("ACTION", "WRITE", "DELETE") and
    toupper(OperationNameValue) startswith toupper("Microsoft.Network/networkSecurityGroups") and //group only, no rules
    OperationNameValue !has "securityRules" and
    ResourceCategory !in ("MICROSOFT.RESOURCEHEALTH", "MICROSOFT.RESOURCES") and
    TimeGenerated > ago(200d)
| join kind=inner ( //join to get all user related info like IsServicePrincipal, role, name from ActivityStatusValue = Success
            AzureActivity
                | where ActivityStatusValue == "Success"
                | extend JoinedAuthorization = Authorization
                | extend JoinedClaims = Claims
                | extend PrincipalType =  parse_json(parse_json(JoinedAuthorization).evidence).principalType
                | extend AppId = parse_json(JoinedClaims)["appid"] //show appid/clientid of registered app if type = ServicePrincipal
                | extend SignInAcctType = iif(PrincipalType == "", "User", PrincipalType)
                | extend RBACRole = parse_json(parse_json(JoinedAuthorization).evidence).role
                | extend SigninUPN = iif(SignInAcctType == "ServicePrincipal",AppId, parse_json(JoinedClaims)["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn"])
                | extend SigninName = iif(SignInAcctType == "ServicePrincipal",AppId, parse_json(JoinedClaims)["name"])
          ) on CorrelationId
| mv-expand Rules
| extend RuleName = tostring(Rules.name)
| extend Direction = tostring(Rules.properties.direction)
| extend Priority = tostring(Rules.properties.priority)
| extend Protocol = tostring(Rules.properties.protocol)
| extend SourceAddressPrefix = tostring(Rules.properties.sourceAddressPrefix)
| extend SourcePortRange = tostring(Rules.properties.sourcePortRange)
| extend DestinationAddressPrefix = tostring(Rules.properties.destinationAddressPrefix)
| extend DestinationPortRange = tostring(Rules.properties.destinationPortRange)
| extend Description = tostring(Rules.properties.description)
| distinct TimeGenerated,
           SubscriptionId,
           ResourceGroup,
           OperationName,
           Resource,
           RuleName,
           Direction,
           Priority,
           Protocol,
           SourceAddressPrefix, 
           DestinationAddressPrefix,
           DestinationPortRange,
           Description,
           SignInAcctType,
           tostring(RBACRole),
           tostring(SigninUPN),
           tostring(SigninName)

| project TimeGenerated, //for column ordering
           SubscriptionId,
           ResourceGroup,
           OperationName,
           Resource,
           RuleName,
           Direction,
           Priority,
           Protocol,
           SourceAddressPrefix, 
           DestinationAddressPrefix,
           DestinationPortRange,
           Description,
           SignInAcctType,
           tostring(RBACRole),
           tostring(SigninUPN),
           tostring(SigninName);

let NSGRulesNotGroup =
    AzureActivity
        | extend CallerIP = CallerIpAddress
        | extend ResourceCategory = parse_json(Properties).resourceProviderValue
        | extend ResourceIDSplit = split(_ResourceId, "/")
        | extend Resource = toupper(ResourceIDSplit[array_length(ResourceIDSplit)-1])
        | extend ActionNamespace = split(parse_json(Authorization).action, "/")
        | extend ActionType = toupper(ActionNamespace[array_length(ActionNamespace) -1])
        | extend RequestBody = todynamic(parse_json(tostring(parse_json(Properties)["requestbody"]))["properties"])

        | extend RuleName = Resource
        | extend Direction = tostring(RequestBody.direction)
        | extend Priority = tostring(RequestBody.priority)
        | extend Protocol = tostring(RequestBody.protocol)
        | extend SourceAddressPrefix = tostring(RequestBody.sourceAddressPrefix)
        | extend SourcePortRange = tostring(RequestBody.sourcePortRange)
        | extend DestinationAddressPrefix = tostring(RequestBody.destinationAddressPrefix)
        | extend DestinationPortRange = tostring(RequestBody.destinationPortRange)
        | extend Description = tostring(RequestBody.description)
        | where
            CategoryValue  == "Administrative" and
            ActivityStatusValue in ("Started", "Success") and
            ActionType in ("ACTION", "WRITE", "DELETE") and
            OperationNameValue has "securityRules" and //*only rules, union security group above
            ResourceCategory !in ("MICROSOFT.RESOURCEHEALTH", "MICROSOFT.RESOURCES") and
            TimeGenerated {TimeRange}
        | join kind=inner ( //join to get all user related info like IsServicePrincipal, role, name from ActivityStatusValue = Success
            AzureActivity
                | where ActivityStatusValue == "Success"
                | extend JoinedAuthorization = Authorization
                | extend JoinedClaims = Claims
                | extend PrincipalType =  parse_json(parse_json(JoinedAuthorization).evidence).principalType
                | extend AppId = parse_json(JoinedClaims)["appid"] //show appid/clientid of registered app if type = ServicePrincipal
                | extend SignInAcctType = iif(PrincipalType == "", "User", PrincipalType)
                | extend RBACRole = parse_json(parse_json(JoinedAuthorization).evidence).role
                | extend SigninUPN = iif(SignInAcctType == "ServicePrincipal",AppId, parse_json(JoinedClaims)["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn"])
                | extend SigninName = iif(SignInAcctType == "ServicePrincipal",AppId, parse_json(JoinedClaims)["name"])
          ) on CorrelationId

        | distinct TimeGenerated,
                SubscriptionId,
                ResourceGroup,
                OperationName,
                Resource,
                RuleName,
                Direction,
                Priority,
                Protocol,
                SourceAddressPrefix, 
                DestinationAddressPrefix,
                DestinationPortRange,
                Description,
                SignInAcctType,
                tostring(RBACRole),
                tostring(SigninUPN),
                tostring(SigninName)

        | project TimeGenerated, //for column ordering
                SubscriptionId,
                ResourceGroup,
                OperationName,
                Resource,
                RuleName,
                Direction,
                Priority,
                Protocol,
                SourceAddressPrefix, 
                DestinationAddressPrefix,
                DestinationPortRange,
                Description,
                SignInAcctType,
                tostring(RBACRole),
                tostring(SigninUPN),
                tostring(SigninName);

NSGGroup
| union NSGRulesNotGroup
| extend LocalTime = datetime_add('hour',8, TimeGenerated)
| project TimeGenerated=format_datetime(LocalTime, 'dd/MM/yyyy [hh:mm:ss tt]'),
            SubscriptionId,
                ResourceGroup,
                OperationName,
                Resource,
                SignInAcctType,
                tostring(RBACRole),
                tostring(SigninUPN),
                tostring(SigninName),
                RuleName,
                Direction,
                Priority,
                Protocol,
                SourceAddressPrefix, 
                DestinationAddressPrefix,
                DestinationPortRange,
                Description
